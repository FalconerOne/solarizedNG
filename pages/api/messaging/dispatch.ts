import type { NextApiRequest, NextApiResponse } from 'next'; import { supabase } from '../../../lib/supabaseClient'; import { sendEmail } from '../../../lib/resendClient'; import { sendPushAll } from '../../../lib/onesignalClient';
export default async function handler(req: NextApiRequest, res: NextApiResponse){ const { data: queue } = await supabase.from('message_queue').select('*').eq('processed', false).limit(50); if(!queue || queue.length===0) return res.status(200).json({ processed: 0 }); let processed=0; for(const item of queue){ try{ if(item.channel==='email'){ const { data: user } = await supabase.from('users').select('email, full_name').eq('id', item.user_id).single(); if(user) await sendEmail(user.email, 'Giveaway update', item.message.replace('{name}', user.full_name||'Friend')); await supabase.from('message_logs').insert([{ user_id: item.user_id, message: item.message, channel: 'email', status: 'sent' }]); } else if(item.channel==='push'){ await sendPushAll(item.message); await supabase.from('message_logs').insert([{ user_id: item.user_id, message: item.message, channel: 'push', status: 'sent' }]); } else { await supabase.from('message_logs').insert([{ user_id: item.user_id, message: item.message, channel: 'in-app', status: 'queued' }]); } await supabase.from('message_queue').update({ processed: true }).eq('id', item.id); processed++; }catch(err:any){ console.error('dispatch error', err); await supabase.from('message_logs').insert([{ user_id: item.user_id, message: item.message, channel: item.channel, status: 'failed', response: String(err) }]); } } return res.status(200).json({ processed }); }
