import Head from 'next/head'; import { useEffect, useState } from 'react'; import { supabase } from '../lib/supabaseClient';
declare global { interface Window { PaystackPop: any; } }
export default function ActivateInline(){ const [user,setUser]=useState<any>(null); const [amount,setAmount]=useState(1000); const [loading,setLoading]=useState(false);
useEffect(()=>{ getUser(); },[]); async function getUser(){ const s = await supabase.auth.getUser(); const u = s.data?.user; if(!u) return; const { data } = await supabase.from('users').select('*').eq('email', u.email).single(); setUser(data); }
async function startPay(e:any){ e.preventDefault(); if(!user) return alert('Please sign in first'); setLoading(true); const refRes = await fetch('/api/paystack/create_reference', { method:'POST', headers:{ 'Content-Type':'application/json' }, body: JSON.stringify({ user_id: user.id, amount }) }); const refJson = await refRes.json(); if(!refJson.reference) return alert('Failed to init payment'); const reference = refJson.reference;
const handler = (window as any).PaystackPop.setup({ key: process.env.NEXT_PUBLIC_PAYSTACK_PUBLIC_KEY || '', email: user.email, amount: amount*100, ref: reference, onClose:function(){ alert('Payment popup closed'); setLoading(false); }, callback: async function(response:any){ const verify = await fetch('/api/paystack/verify', { method:'POST', headers:{ 'Content-Type':'application/json' }, body: JSON.stringify({ reference: response.reference, user_id: user.id }) }); const vj = await verify.json(); if(vj.ok){ alert('Payment verified — activation complete'); window.location.href = '/dashboard'; }else{ alert('Payment verification failed: ' + (vj.error || 'unknown')); } setLoading(false); } }); handler.openIframe(); }
return (<div className="min-h-screen flex items-center justify-center p-4"><Head><title>Activate — Inline Paystack</title></Head><div className="bg-white p-6 rounded shadow w-full max-w-md"><h2 className="text-lg font-bold">Activate with Paystack</h2><p className="mt-2">Inline popup will open — stay on the page until verification completes.</p><form onSubmit={startPay} className="mt-4"><label>Amount (NGN)<input type="number" value={amount} onChange={e=>setAmount(Number(e.target.value))} className="w-full border p-2 rounded"/></label><button disabled={loading} className="mt-3 bg-amber-500 text-white px-4 py-2 rounded">Pay & Activate</button></form></div></div>); }
