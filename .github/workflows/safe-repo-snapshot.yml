name: Safe Repo Snapshot + Restore

on:
  push:
    branches:
      - main
      - production

  workflow_dispatch:
    inputs:
      action:
        description: "Choose: 'snapshot' to create backup or 'restore' to roll back"
        required: true
        default: "snapshot"
      label:
        description: "Optional label or note (e.g., before major update)"
        required: false
        default: "manual"
      restore_tag:
        description: "Tag name to restore from (only needed for restore)"
        required: false

  schedule:
    - cron: "30 23 * * *" # Nightly 23:30 UTC

jobs:
  main:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate Timestamp
        id: time
        run: echo "timestamp=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT

      - name: Determine Type
        id: type
        run: |
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            echo "type=nightly" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.inputs.action }}" == "restore" ]]; then
            echo "type=restore" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "type=manual" >> $GITHUB_OUTPUT
          else
            echo "type=auto" >> $GITHUB_OUTPUT
          fi

      - name: Compute Labels
        id: label
        run: |
          INPUT_LABEL="${{ github.event.inputs.label }}"
          if [[ -z "$INPUT_LABEL" ]]; then
            LABEL="${{ steps.type.outputs.type }}"
          else
            LABEL="$INPUT_LABEL"
          fi
          SAFE_LABEL=$(echo "$LABEL" | tr -cd '[:alnum:]_-')
          echo "safe_label=$SAFE_LABEL" >> $GITHUB_OUTPUT

      # --- SNAPSHOT SECTION ---
      - name: Create Snapshot
        if: ${{ steps.type.outputs.type != 'restore' }}
        run: |
          SNAP_TYPE="${{ steps.type.outputs.type }}"
          LABEL="${{ steps.label.outputs.safe_label }}"
          TS="${{ steps.time.outputs.timestamp }}"
          BRANCH_NAME="${SNAP_TYPE}-snapshot-${LABEL}-${TS}"
          TAG_NAME="${SNAP_TYPE}-snapshot-${LABEL}-${TS}"

          git checkout -b "$BRANCH_NAME"
          git push origin "$BRANCH_NAME" || echo "‚ö†Ô∏è Branch push skipped (already exists)"

          git tag -a "$TAG_NAME" -m "Snapshot created: $TAG_NAME"
          git push origin "$TAG_NAME" || echo "‚ö†Ô∏è Tag push skipped (already exists)"

          echo "üéâ Snapshot ($SNAP_TYPE) created successfully at $TAG_NAME"

      - name: Cleanup Old Snapshots (Nightly)
        if: ${{ steps.type.outputs.type == 'nightly' }}
        run: |
          echo "üßπ Cleaning old nightly snapshots..."
          git fetch --tags
          TAGS=$(git tag -l "nightly-snapshot-*" | sort -r | tail -n +21)
          for TAG in $TAGS; do
            echo "Deleting old tag: $TAG"
            git push origin :refs/tags/$TAG || true
          done

      # --- RESTORE SECTION ---
      - name: Validate Restore Input
        if: ${{ steps.type.outputs.type == 'restore' }}
        run: |
          if [[ -z "${{ github.event.inputs.restore_tag }}" ]]; then
            echo "‚ùå ERROR: You must provide a valid tag in 'restore_tag' to restore from."
            exit 1
          fi

      - name: Restore From Snapshot
        if: ${{ steps.type.outputs.type == 'restore' }}
        run: |
          TAG="${{ github.event.inputs.restore_tag }}"
          echo "üîÅ Restoring repository from snapshot: $TAG"

          git fetch origin "refs/tags/$TAG:refs/tags/$TAG" || {
            echo "‚ùå ERROR: Snapshot tag '$TAG' not found."; exit 1;
          }

          echo "‚úÖ Found tag $TAG, proceeding with restore..."
          git checkout "$TAG"

          RESTORE_BRANCH="restore-${TAG}-$(date +'%Y%m%d-%H%M%S')"
          git checkout -b "$RESTORE_BRANCH"
          git push origin "$RESTORE_BRANCH"

          echo "üéØ Restore completed. Branch created: $RESTORE_BRANCH"
          echo "You can now review and merge manually if safe."

      # --- LOGGING ---
      - name: Log to snapshot-log.md
        run: |
          echo "### Snapshot/Restore Log" >> snapshot-log.md
          echo "- **Event:** ${{ steps.type.outputs.type }}" >> snapshot-log.md
          echo "- **Time:** $(date -u)" >> snapshot-log.md
          echo "- **Tag:** ${{ github.event.inputs.restore_tag || 'N/A' }}" >> snapshot-log.md
          echo "- **Actor:** ${{ github.actor }}" >> snapshot-log.md
          echo "" >> snapshot-log.md

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add snapshot-log.md
          git commit -m "Update snapshot log: ${{ steps.type.outputs.type }}" || echo "‚ÑπÔ∏è No changes to commit"
          git push || echo "‚ö†Ô∏è Log push skipped"

