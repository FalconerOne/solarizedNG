name: Safe Repo Snapshots (Auto + Manual + Nightly + Cleanup)

on:
  push:
    branches:
      - main
      - production

  workflow_dispatch:
    inputs:
      label:
        description: "Optional label or reason for manual snapshot (e.g. before major update)"
        required: false
        default: "manual"

  schedule:
    # Run nightly at 23:30 UTC
    - cron: "30 23 * * *"

jobs:
  snapshot:
    runs-on: ubuntu-latest
    name: Create & Maintain Snapshots

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate timestamp
        id: time
        run: echo "timestamp=$(date +'%Y-%m-%d_%H-%M-%S')" >> $GITHUB_OUTPUT

      - name: Determine snapshot type
        id: type
        run: |
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            echo "type=nightly" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "type=manual" >> $GITHUB_OUTPUT
          else
            echo "type=auto" >> $GITHUB_OUTPUT
          fi

      - name: Set label
        id: label
        run: |
          INPUT_LABEL="${{ github.event.inputs.label }}"
          if [[ -z "$INPUT_LABEL" ]]; then
            LABEL="${{ steps.type.outputs.type }}"
          else
            LABEL="$INPUT_LABEL"
          fi
          SAFE_LABEL=$(echo "$LABEL" | tr -cd '[:alnum:]_-')
          echo "safe_label=$SAFE_LABEL" >> $GITHUB_OUTPUT

      - name: Create snapshot directory if missing
        run: mkdir -p .github/snapshots

      - name: Create snapshot ZIP
        id: zip
        run: |
          SNAP_NAME="snapshot_${{ steps.type.outputs.type }}_${{ steps.label.outputs.safe_label }}_${{ steps.time.outputs.timestamp }}.zip"
          SNAP_PATH=".github/snapshots/$SNAP_NAME"
          zip -r "$SNAP_PATH" . -x "*.git*" ".github/snapshots/*" || echo "‚úÖ Snapshot created at $SNAP_PATH"
          echo "snapshot_name=$SNAP_NAME" >> $GITHUB_OUTPUT
          echo "snapshot_path=$SNAP_PATH" >> $GITHUB_OUTPUT

      - name: Commit snapshot archive
        run: |
          git config user.name "GitHub Snapshot Bot"
          git config user.email "snapshot@github.com"
          git add .github/snapshots/
          git commit -m "Snapshot created: ${{ steps.zip.outputs.snapshot_name }}" || echo "No new snapshot changes to commit"
          git push origin HEAD || echo "‚ö†Ô∏è Snapshot push skipped (already synced)"

      - name: Log snapshot creation
        run: |
          echo "- ‚úÖ **${{ steps.type.outputs.type }}** snapshot: \`${{ steps.zip.outputs.snapshot_name }}\` created on $(date -u)" >> snapshot-log.md
          git add snapshot-log.md
          git commit -m "Update snapshot log: ${{ steps.zip.outputs.snapshot_name }}" || echo "No snapshot log updates"
          git push origin HEAD || echo "Log push skipped"

      - name: Clean up old snapshots (keep last 10)
        run: |
          echo "üßπ Checking for old snapshots to delete..."
          SNAPSHOT_DIR=".github/snapshots"
          TOTAL=$(ls -1t "$SNAPSHOT_DIR"/*.zip 2>/dev/null | wc -l || echo 0)
          if [ "$TOTAL" -gt 10 ]; then
            echo "Found $TOTAL snapshots. Keeping latest 10..."
            ls -1t "$SNAPSHOT_DIR"/*.zip | tail -n +11 | while read OLD; do
              echo "üóëÔ∏è Deleting $OLD"
              rm -f "$OLD"
            done
          else
            echo "‚úÖ Snapshot count within limit ($TOTAL <= 10)"
          fi

      - name: Commit cleanup if any deletions occurred
        run: |
          git add .github/snapshots/
          git commit -m "Cleanup old snapshots (kept latest 10)" || echo "No cleanup needed"
          git push origin HEAD || echo "Cleanup push skipped"

      - name: Summary output
        run: |
          echo "üéâ Snapshot process completed successfully!"
          echo "File: ${{ steps.zip.outputs.snapshot_path }}"
